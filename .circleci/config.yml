version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.4-node-browsers
      - image: circleci/mysql:5.7
        environment:
          MYSQL_USER: root
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: altara

    working_directory: ~/laravel

    steps:
      - checkout
      - run:
          name: Install PHP exts
          command: |
            sudo apt update
            sudo apt install -y mariadb-client libpq-dev libpng-dev
            sudo docker-php-ext-install zip
            sudo docker-php-ext-install pdo_mysql
            sudo docker-php-ext-install gd
      - run: sudo composer self-update

      # Download and cache dependencies
      - restore_cache:
          name: Restore composer cache
          keys:
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}

      # Npm
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: v1-dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install packages
          command: npm install
      - save_cache:
          key: v1-dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      # prepare the database
      - run:
          name: "Create Environment file and generate app key"
          command: |
            mv .env.testing .env
            php artisan key:generate

      - run:
          name: "Create database and run migration"
          command: |
             php artisan
#            php artisan migrate --env=testing
#            php artisan db:seed

      - run:
          name: "Generate JWT encryption keys"
          command: php artisan

      # run tests with Codeception
      - run:
          name: "Run Backend Tests"
          command: php vendor/bin/codecept run api

      # run tests with Jest
      - run:
          name: "Run Frontend Tests"
          command: npm run test:unit

workflows:
  version: 2
  deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - staging
                - master
