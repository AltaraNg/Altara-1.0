# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
#version: 2
#jobs:
#  build:
#    docker:
#      # Specify the version you desire here
#      - image: circleci/php:7.4-node-browsers
#      - image: circleci/mysql:5.7
#        environment:
#          MYSQL_USER: root
#          MYSQL_ROOT_PASSWORD: passwod
#          MYSQL_DATABASE: altara
#    working_directory: ~/repo
#    steps:
#      - checkout
#
#      - run:
#          name: "Prepare Environment"
#          command: |
#            sudo apt-get install -y libzip-dev
#            sudo docker-php-ext-install zip
#            sudo apt-get update
#            sudo apt-get install -y zlib1g-dev libicu-dev g++
#            sudo docker-php-ext-configure intl
#            sudo docker-php-ext-install intl
#            sudo docker-php-ext-install pdo_mysql
#
#      - run: sudo composer self-update
#
#      # Download and cache dependencies
#      - restore_cache: # special step to restore the dependency cache if `composer.lock` does not change
#          keys:
#            - composer-v1-{{ checksum "composer.lock" }}
#            # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
#            - composer-v1-
#            - run: composer install -n --prefer-dist
#            - save_cache: # special step to save the dependency cache with the `composer.lock` cache key template
#                key: composer-v1-{{ checksum "composer.lock" }}
#                paths:
#                  - vendor
#
#      - restore_cache: # special step to restore the dependency cache if `package-lock.json` does not change
#          keys:
#            - node-v1-{{ checksum "package-lock.json" }}
#            # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
#            - node-v1-
#            - run: yarn install
#            - save_cache: # special step to save the dependency cache with the `package-lock.json` cache key template
#                key: node-v1-{{ checksum "package-lock.json" }}
#                paths:
#                  - node_modules
#
#      # prepare the database
#      - run:
#          name: "Create Environment file and generate app key"
#          command: |
#            mv .env.testing .env
#            php artisan key:generate
#
#      - run:
#          name: "Create database and run migration"
#          command: |
#            php artisan migrate --env=testing
#            php artisan db:seed
#
#      - run:
#          name: "Generate JWT encryption keys"
#          command: php artisan
#
#      # run tests with phpunit
#      - run:
#          name: "Run Tests"
#          command: php vendor/bin/codecept run api
#      - store_test_results:
#          path: tests/_output
#      - store_artifacts:
#          path: tests/_output


version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.4-node-browsers
      - image: circleci/mysql:5.7
        environment:
          MYSQL_USER: root
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: altara

    working_directory: ~/laravel

    steps:
      - checkout
      - run:
          name: Install PHP exts
          command: |
            sudo apt update
            sudo apt install -y mariadb-client libpq-dev
            sudo docker-php-ext-install zip
            sudo docker-php-ext-install pdo_mysql mbstring zip exif pcntl
            sudo docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/
            docker-php-ext-install gd
      - run: sudo composer self-update

      # Download and cache dependencies
      - restore_cache:
          name: Restore composer cache
          keys:
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}

      # Yarn
      - restore_cache:
          name: Restore yarn cache
          keys:
            - yarn-{{ checksum "yarn.lock" }}
            - yarn-

      - run: yarn

      - save_cache:
          paths:
            - node_modules
          key: yarn-{{ checksum "composer.json" }}

      - run: npm run production

      # prepare the database
      - run:
          name: "Create Environment file and generate app key"
          command: |
            mv .env.testing .env
            php artisan key:generate

      - run:
          name: "Create database and run migration"
          command: |
            php artisan migrate --env=testing
            php artisan db:seed

      - run:
          name: "Generate JWT encryption keys"
          command: php artisan

      # run tests with Codeception
      - run:
          name: "Run Tests"
          command: php vendor/bin/codecept run api
      - store_test_results:
          path: tests/_output
      - store_artifacts:
          path: tests/_output

workflows:
  version: 2
  deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - staging
                - master
